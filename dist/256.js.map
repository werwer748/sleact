{"version":3,"file":"256.js","mappings":"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","sources":["webpack://alecture/./components/InviteChannelModal/index.tsx","webpack://alecture/./components/Modal/styles.tsx","webpack://alecture/./components/Modal/index.tsx","webpack://alecture/./hooks/useSocket.ts","webpack://alecture/./pages/Channel/styles.tsx","webpack://alecture/./pages/Channel/index.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport Modal from '@components/Modal';\nimport { Button, Input, Label } from '@pages/SingUp/styles';\nimport { useParams } from 'react-router';\nimport useInput from '@hooks/useInput';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\ninterface IProps {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\n\nconst InviteChannelModal = ({ show, onCloseModal, setShowInviteChannelModal }: IProps) => {\n  const { workspace, channel } = useParams();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { data: membersData, mutate: mutateMembers } = useSWR<IUser[]>(\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) return;\n\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          mutateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { MouseEvent, ReactNode, useCallback } from 'react';\nimport { CloseModalButton, CreateModal } from './styles';\n\ninterface IProps {\n  show: boolean;\n  onCloseModal: () => void;\n  children: ReactNode;\n}\n\nconst Modal = ({ show, children, onCloseModal }: IProps) => {\n  const stopPropagation = useCallback((e: MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import { io, Socket } from 'socket.io-client';\nimport { useCallback } from 'react';\n\nconst backUrl = 'http://localhost:3095';\n\nlet socket: Socket | undefined;\n\nconst useSocket = (workspace?: string): [Socket | undefined, () => void] => {\n  //   console.log('rerender', workspace);\n  const disconnect = useCallback(() => {\n    if (socket) {\n      socket.disconnect();\n      socket = undefined;\n    }\n  }, []);\n  if (!socket) {\n    socket = io(`${backUrl}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n  }\n  return [socket, disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Container, Header } from '@pages/Channel/styles';\nimport ChatList from '@components/ChatList';\nimport ChatBox from '@components/ChatBox';\nimport useInput from '@hooks/useInput';\nimport gravatar from 'gravatar';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport useSWRInfinite from 'swr/infinite';\nimport { IDM, IUser, IChat } from '@typings/db';\nimport useSocket from '@hooks/useSocket';\nimport Scrollbars from 'react-custom-scrollbars';\nimport axios from 'axios';\nimport makeSection from '@utils/makeSection';\nimport InviteChannelModal from '@components/InviteChannelModal';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams();\n  const { data: myData } = useSWR('/api/users', fetcher);\n\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n    //? useSWRInfinite를 쓰면 2차원 배열이 된다.\n  );\n  const { data: channelData } = useSWR(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const [socket] = useSocket(workspace);\n\n  //* useSWRInfinite 쓸 때 같이 표현해 두면 좋은 두가지\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n\n  const onSubmitForm = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          const setData: IChat[][] = prevChatData ? [...prevChatData] : [];\n          setData.length !== 0 &&\n            (setData[0] = [\n              ...setData[0],\n              {\n                id: (chatData[0][0]?.id || 0) + 1,\n                content: savedChat,\n                UserId: myData.id,\n                User: myData,\n                ChannelId: channelData.id,\n                Channel: channelData,\n                createdAt: new Date(),\n              },\n            ]);\n          return setData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then((res) => {\n            console.log('채팅 성공값', res);\n            mutateChat();\n          })\n          .catch(console.error);\n      }\n      setChat('');\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      if (data.Channel.name === channel && data.UserId !== myData.id) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!!!!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n  //! reverse로 원본 배열이 바뀌지 않는다. flat이 새로운 배열을 반환해주고 그걸 reverse 한거니까!\n\n  return (\n    <Container>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c--icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList\n        chatSections={chatSections}\n        ref={scrollbarRef}\n        setSize={setSize}\n        isEmpty={isEmpty}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","membersData","mutate","mutateMembers","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","socket","disconnect","undefined","io","transports","Container","Header","myData","chatData","mutateChat","setSize","useSWRInfinite","index","channelData","channelMembersData","useSocket","isEmpty","length","isReachingEnd","chat","onChangeChat","setChat","scrollbarRef","useRef","showInviteChannelModal","useState","onSubmitForm","savedChat","prevChatData","setData","content","UserId","User","ChannelId","Channel","createdAt","Date","current","scrollToBottom","res","log","onMessage","name","unshift","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","chatSections","makeSection","flat","reverse","className","ChatList","ref","ChatBox","InviteChannelModal"],"sourceRoot":""}