{"version":3,"file":"13.js","mappings":"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","sources":["webpack://alecture/./components/ChatBox/styles.tsx","webpack://alecture/./components/ChatBox/index.tsx","webpack://alecture/./components/ChatList/styles.tsx","webpack://alecture/./components/Chat/styles.tsx","webpack://alecture/./components/Chat/index.tsx","webpack://alecture/./components/ChatList/index.tsx","webpack://alecture/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\n/*\n* 함수 호출방법\nfunction a(){};\na();\na.call();\na.apply();\na.bind()();\n? a``; <- 태그드 템플릿 리터럴 tagged template literal\n*/\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { ChatArea, Form, MentionsTextarea, Toolbox, SendButton, EachMention } from './styles';\nimport autosize from 'autosize';\nimport { Mention, OnChangeHandlerFunc, SuggestionDataItem } from 'react-mentions';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport gravatar from 'gravatar';\n\ninterface IProps {\n  chat: string;\n  onSubmitForm: (e: React.FormEvent) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\n\nconst ChatBox = ({ chat, onSubmitForm, onChangeChat, placeholder }: IProps) => {\n  const { workspace } = useParams();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000,\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n  const textareaRef = useRef(null); //태그에 직접 접근하고 싶을때\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onKeydownChat = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focused: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focused}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyDown={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n","import React, { memo, useMemo } from 'react';\nimport { ChatWrapper } from './styles';\nimport gravatar from 'gravatar';\nimport { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link } from 'react-router-dom';\nimport { useParams } from 'react-router';\n\ninterface IProps {\n  data: IDM | IChat;\n}\n\n//* a?.b => optinal chaining\n//* a??.b => nullish coalescing\n\nconst Chat = ({ data }: IProps) => {\n  //? 이렇게 작성하면 타입스크립트가 dm인지 channel인지 판단한다.(javascript 문법)\n  //? 두가지 이상의 타입이 겹쳐져있을때 타입을 구분해주는거 -> 타입가드\n  const user = 'Sender' in data ? data.Sender : data.User;\n  const { workspace } = useParams();\n\n  /*\n  ? \\(역슬래시) <- escape라고한다 : 특수기호를 무력화!\n  ? \\d 숫자\n  ? +는 1개 이상 ?, *는 0개 이상\n  ? +는 최대한 많이 +? 는 최대한 조금\n  ? g는 모두 찾기\n  ? |는 또는 \\n은 줄바꿈\n  ? ()로 묶는건 그루핑이라고 한다. 묶인 값이 arr[1],arr[2]... 에 추가 된다고 함.\n  */\n  const result = useMemo(\n    () =>\n      regexifyString({\n        //? hooks안에서 개별값을 캐싱하고 싶다면 useMemo\n        input: data.content,\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n]/g,\n        decorator(match, index, result) {\n          const arr = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n          if (arr) {\n            return (\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                @{arr[1]}\n              </Link>\n            );\n          }\n          return <br key={index} />;\n        },\n      }),\n    [data.content],\n  ); //? 디펜던시는 캐싱을 푸는 (캐싱을 갱신하는 조건)을 써줘야 함.\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>&nbsp;{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\n//? memo의 역할: props가 똑같으면 부모가 바뀌어도 자식이 리렌더링 되지 않게 해준다.\n//? 최적화를 위해서는 말단 컴포넌트 단에서 memo, useMemo를 잘 써줘야 한다.\nexport default memo(Chat);\n","import React, { forwardRef, MutableRefObject, useCallback, useRef } from 'react';\nimport { IChat, IDM } from '@typings/db';\nimport { ChatZone, Section, StickyHeader } from './styles';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Chat from '@components/Chat';\n\ninterface IProps {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isEmpty: boolean;\n  isReachingEnd: boolean;\n}\n\nconst ChatList = forwardRef<Scrollbars, IProps>(({ chatSections, setSize, isEmpty, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback((values: any) => {\n    if (values.scrollTop === 0 && !isReachingEnd) {\n      const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n      console.log('맨 위 도착');\n      console.log('스크롤바 current1', current.getScrollHeight());\n      //데이터 추가 로딩\n      setSize((prevSize) => prevSize + 1).then(() => {\n        // 스크롤 위치 유지\n        setTimeout(() => {\n          if (current) {\n            console.log('스크롤바 current2', current.getScrollHeight());\n            console.log('스크롤바 values', values);\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        }, 0);\n      });\n    }\n  }, []);\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          // Object.entries <= 객체 반복문 돌릴 때 사용\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n\n  return sections;\n}\n"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","data","userData","error","mutate","useSWR","fetcher","dedupingInterval","memberData","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","focused","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatZone","Section","StickyHeader","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","to","dayjs","createdAt","format","memo","forwardRef","chatSections","setSize","isEmpty","isReachingEnd","scrollRef","onScroll","values","scrollTop","console","log","getScrollHeight","prevSize","then","setTimeout","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}