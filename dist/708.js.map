{"version":3,"file":"708.js","mappings":";yJAEO,MAAMA,GAAS,sJAQTC,GAAM,icCOnB,MA4JA,EA5JgB,KACd,MAAM,UAAEC,EAAS,QAAEC,IAAYC,EAAAA,EAAAA,OACvBC,KAAMC,IAAWC,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,IAG5CH,KAAMI,EACNC,OAAQC,EAAU,QAClBC,IACEC,EAAAA,EAAAA,KACDC,GAAW,mBAAkBZ,cAAsBC,2BAAiCW,EAAQ,KAC7FN,EAAAA,IAGMH,KAAMU,IAAgBR,EAAAA,EAAAA,IAAQ,mBAAkBL,cAAsBC,IAAWK,EAAAA,IACjFH,KAAMW,IAAuBT,EAAAA,EAAAA,IACnCD,EAAU,mBAAkBJ,cAAsBC,YAAoB,KACtEK,EAAAA,IAGKS,IAAUC,EAAAA,EAAAA,GAAUhB,GAGrBiB,EAAoC,IAA1BV,IAAW,IAAIW,OACzBC,EAAgBF,GAAYV,GAAYA,EAASA,EAASW,OAAS,IAAIA,OAAS,KAAO,GAEtFE,EAAMC,EAAcC,IAAWC,EAAAA,EAAAA,GAAS,IACzCC,GAAeC,EAAAA,EAAAA,QAAmB,OACjCC,EAAwBC,IAA6BC,EAAAA,EAAAA,WAAS,GAE/DC,GAAeC,EAAAA,EAAAA,cAClBC,IAEC,GADAA,EAAEC,iBACEZ,GAAMa,QAAU1B,GAAYM,EAAa,CAC3C,MAAMqB,EAAYd,EAClBX,GAAY0B,IACV,MAAMC,EAAqBD,EAAe,IAAIA,GAAgB,GAc9D,OAbmB,IAAnBC,EAAQlB,SACLkB,EAAQ,GAAK,IACTA,EAAQ,GACX,CACEC,IAAK9B,EAAS,GAAG,IAAI8B,IAAM,GAAK,EAChCC,QAASJ,EACTK,OAAQnC,EAAOiC,GACfG,KAAMpC,EACNqC,UAAW5B,EAAYwB,GACvBK,QAAS7B,EACT8B,UAAW,IAAIC,QAGdR,CAAO,IACb,GAAOS,MAAK,KACbvB,EAAQ,IACRE,EAAasB,SAASC,gBAAgB,IAExCC,EAAAA,EAAAA,KACS,mBAAkBhD,cAAsBC,UAAiB,CAC9DqC,QAASlB,IAEVyB,MAAMI,IACLC,QAAQC,IAAI,SAAUF,GACtBxC,GAAY,IAEb2C,MAAMF,QAAQG,MACnB,CACA/B,EAAQ,GAAG,GAEb,CAACF,EAAMb,EAAUH,EAAQS,EAAab,EAAWC,IAG7CqD,GAAYxB,EAAAA,EAAAA,cACf3B,IACKA,EAAKuC,QAAQa,OAAStD,GAAWE,EAAKoC,SAAWnC,EAAOiC,IAC1D5B,GAAYF,IACVA,IAAW,GAAGiD,QAAQrD,GACfI,KACN,GAAOsC,MAAK,KACTrB,EAAasB,SAEbtB,EAAasB,QAAQW,kBACrBjC,EAAasB,QAAQY,kBAAoBlC,EAAasB,QAAQa,eAAiB,MAE/ET,QAAQC,IAAI,qBAAsB3B,EAAasB,SAASc,aACxDC,YAAW,KACTrC,EAAasB,SAASC,gBAAgB,GACrC,IAEP,GAEJ,GAEF,CAAC9C,EAASG,KAGZ0D,EAAAA,EAAAA,YAAU,KACR/C,GAAQgD,GAAG,UAAWT,GACf,KACLvC,GAAQiD,IAAI,UAAWV,EAAU,IAElC,CAACvC,EAAQuC,KAGZQ,EAAAA,EAAAA,YAAU,KACiB,IAArBvD,GAAUW,QACZM,EAAasB,SAASC,gBACxB,GACC,CAACxC,IAEJ,MAAM0D,GAAuBnC,EAAAA,EAAAA,cAAY,KACvCH,GAA0B,EAAK,GAC9B,IAEGuC,GAAepC,EAAAA,EAAAA,cAAY,KAC/BH,GAA0B,EAAM,GAC/B,IAEH,IAAKvB,IAAWA,EACd,OAAO,KAGT,MAAM+D,GAAeC,EAAAA,EAAAA,GAAY7D,EAAWA,EAAS8D,OAAOC,UAAY,IAGxE,OACE,gBAACxE,EAAS,KACR,gBAACC,EAAM,KACL,gCAAQE,GACR,uBAAKsE,UAAU,gBACb,4BAAOzD,GAAoBI,QAC3B,0BACEsD,QAASP,EACTM,UAAU,8CACV,aAAW,8BACX,UAAQ,iBACRE,KAAK,UAEL,qBAAGF,UAAU,0DAA0D,cAAY,YAIzF,gBAACG,EAAA,EAAQ,CACPP,aAAcA,EACdQ,IAAKnD,EACLd,QAASA,EACTO,QAASA,EACTE,cAAeA,IAEjB,gBAACyD,EAAA,EAAO,CAACxD,KAAMA,EAAMC,aAAcA,EAAcQ,aAAcA,IAC/D,gBAACgD,EAAA,EAAkB,CACjBC,KAAMpD,EACNwC,aAAcA,EACdvC,0BAA2BA,IAEnB","sources":["webpack://alecture/./pages/Channel/styles.tsx","webpack://alecture/./pages/Channel/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Container, Header } from '@pages/Channel/styles';\nimport ChatList from '@components/ChatList';\nimport ChatBox from '@components/ChatBox';\nimport useInput from '@hooks/useInput';\nimport gravatar from 'gravatar';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport useSWRInfinite from 'swr/infinite';\nimport { IDM, IUser, IChat } from '@typings/db';\nimport useSocket from '@hooks/useSocket';\nimport Scrollbars from 'react-custom-scrollbars';\nimport axios from 'axios';\nimport makeSection from '@utils/makeSection';\nimport InviteChannelModal from '@components/InviteChannelModal';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams();\n  const { data: myData } = useSWR('/api/users', fetcher);\n\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n    //? useSWRInfinite를 쓰면 2차원 배열이 된다.\n  );\n  const { data: channelData } = useSWR(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const [socket] = useSocket(workspace);\n\n  //* useSWRInfinite 쓸 때 같이 표현해 두면 좋은 두가지\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n\n  const onSubmitForm = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          const setData: IChat[][] = prevChatData ? [...prevChatData] : [];\n          setData.length !== 0 &&\n            (setData[0] = [\n              ...setData[0],\n              {\n                id: (chatData[0][0]?.id || 0) + 1,\n                content: savedChat,\n                UserId: myData.id,\n                User: myData,\n                ChannelId: channelData.id,\n                Channel: channelData,\n                createdAt: new Date(),\n              },\n            ]);\n          return setData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then((res) => {\n            console.log('채팅 성공값', res);\n            mutateChat();\n          })\n          .catch(console.error);\n      }\n      setChat('');\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      if (data.Channel.name === channel && data.UserId !== myData.id) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!!!!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n  //! reverse로 원본 배열이 바뀌지 않는다. flat이 새로운 배열을 반환해주고 그걸 reverse 한거니까!\n\n  return (\n    <Container>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c--icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList\n        chatSections={chatSections}\n        ref={scrollbarRef}\n        setSize={setSize}\n        isEmpty={isEmpty}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["Container","Header","workspace","channel","useParams","data","myData","useSWR","fetcher","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","channelData","channelMembersData","socket","useSocket","isEmpty","length","isReachingEnd","chat","onChangeChat","setChat","useInput","scrollbarRef","useRef","showInviteChannelModal","setShowInviteChannelModal","useState","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","setData","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","res","console","log","catch","error","onMessage","name","unshift","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","chatSections","makeSection","flat","reverse","className","onClick","type","ChatList","ref","ChatBox","InviteChannelModal","show"],"sourceRoot":""}