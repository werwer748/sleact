{"version":3,"file":"94.js","mappings":"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","sources":["webpack://alecture/./pages/DirectMessage/styles.tsx","webpack://alecture/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Container, Header } from './styles';\nimport gravatar from 'gravatar';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\nimport makeSection from '../../utils/makeSection';\nimport Scrollbars from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams();\n  const { data: userData, mutate: userMutate } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n    //? useSWRInfinite를 쓰면 2차원 배열이 된다.\n  );\n\n  const [socket] = useSocket(workspace);\n\n  //* useSWRInfinite 쓸 때 같이 표현해 두면 좋은 두가지\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  const onSubmitForm = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          const setData: IDM[][] = prevChatData ? [...prevChatData] : [];\n          setData.length !== 0 &&\n            (setData[0] = [\n              ...setData[0],\n              {\n                id: (chatData[0][0]?.id || 0) + 1,\n                content: savedChat,\n                SenderId: myData.id,\n                Sender: myData,\n                ReceiverId: userData.id,\n                Receiver: userData,\n                createdAt: new Date(),\n              },\n            ]);\n          return setData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then((res) => {\n            console.log('채팅 성공값', res);\n            mutateChat();\n          })\n          .catch(console.error);\n      }\n      setChat('');\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  const onMessage = useCallback((data: IDM) => {\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            console.log('scrollToBottom!!!!', scrollbarRef.current?.getValues());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n  //! reverse로 원본 배열이 바뀌지 않는다. flat이 새로운 배열을 반환해주고 그걸 reverse 한거니까!\n\n  return (\n    <Container>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n      </Header>\n      <ChatList\n        chatSections={chatSections}\n        ref={scrollbarRef}\n        setSize={setSize}\n        isEmpty={isEmpty}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["Container","Header","workspace","id","useParams","data","userData","mutate","userMutate","useSWR","fetcher","myData","chatData","mutateChat","setSize","useSWRInfinite","index","socket","useSocket","isEmpty","length","isReachingEnd","chat","onChangeChat","setChat","useInput","scrollbarRef","useRef","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","setData","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","res","console","log","catch","error","onMessage","Number","unshift","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"sourceRoot":""}