{"version":3,"file":"668.js","mappings":"qNASA,MAqHA,EArHe,KACb,MAAM,KAAEA,EAAI,MAAEC,EAAK,OAAEC,IAAWC,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,IAE9CC,EAAOC,IAAiBC,EAAAA,EAAAA,GAAS,KACjCC,EAAUC,IAAoBF,EAAAA,EAAAA,GAAS,KACvCG,EAAS,CAAGC,IAAeJ,EAAAA,EAAAA,GAAS,KACpCK,EAAc,CAAGC,IAAoBN,EAAAA,EAAAA,GAAS,KAC9CO,EAAeC,IAAqBC,EAAAA,EAAAA,WAAS,IAC7CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAeC,IAAoBJ,EAAAA,EAAAA,WAAS,GAE7CK,GAAmBC,EAAAA,EAAAA,cACtBC,IACCZ,EAAYY,EAAEC,OAAOC,OACrBV,EAAkBQ,EAAEC,OAAOC,QAAUb,EAAc,GAErD,CAACA,IAGGc,GAAwBJ,EAAAA,EAAAA,cAC3BC,IACCV,EAAiBU,EAAEC,OAAOC,OAC1BV,EAAkBQ,EAAEC,OAAOC,QAAUf,EAAS,GAEhD,CAACA,IAGGiB,GAAWL,EAAAA,EAAAA,cACdC,IACCA,EAAEK,kBACGd,GAAiBN,IACpBqB,QAAQC,IAAI,cACZZ,EAAe,IACfE,GAAiB,GACjBW,EAAAA,EAAAA,KACQ,aAAc,CAClB1B,QACAG,WACAE,aAEDsB,MAAMC,IACLJ,QAAQC,IAAIG,GACZb,GAAiB,EAAK,IAEvBc,OAAOjC,IACN4B,QAAQC,IAAI7B,EAAMgC,UAClBf,EAAejB,EAAMgC,SAASjC,KAAK,IAEpCmC,SAAQ,SAOb,GAEF,CAAC9B,EAAOG,EAAUE,EAAUE,EAAeE,IAG7C,YAAasB,IAATpC,EACK,sCAGLA,EACK,gBAAC,KAAQ,CAACqC,GAAG,iCAKpB,uBAAKC,GAAG,aACN,gBAAC,KAAM,eACP,gBAAC,KAAI,CAACX,SAAUA,GACd,gBAAC,KAAK,CAACW,GAAG,eACR,sCACA,2BACE,gBAAC,KAAK,CAACC,KAAK,QAAQD,GAAG,QAAQE,KAAK,QAAQf,MAAOpB,EAAOoC,SAAUnC,MAGxE,gBAAC,KAAK,CAACgC,GAAG,kBACR,mCACA,2BACE,gBAAC,KAAK,CAACC,KAAK,OAAOD,GAAG,WAAWE,KAAK,WAAWf,MAAOjB,EAAUiC,SAAUhC,MAGhF,gBAAC,KAAK,CAAC6B,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAK,CAACC,KAAK,WAAWD,GAAG,WAAWE,KAAK,WAAWf,MAAOf,EAAU+B,SAAUpB,MAGpF,gBAAC,KAAK,CAACiB,GAAG,wBACR,uCACA,2BACE,gBAAC,KAAK,CACJC,KAAK,WACLD,GAAG,iBACHE,KAAK,iBACLf,MAAOb,EACP6B,SAAUf,KAGbZ,GAAiB,gBAAC,KAAK,0BACtBN,GAAY,gBAAC,KAAK,qBACnBS,GAAe,gBAAC,KAAK,KAAEA,GACvBE,GAAiB,gBAAC,KAAO,6BAE5B,gBAAC,KAAM,CAACoB,KAAK,UAAQ,SAEvB,gBAAC,KAAa,mBAEZ,gBAAC,KAAI,CAACF,GAAG,UAAQ,aAEf,C","sources":["webpack://alecture/./pages/SingUp/index.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport useInput from '@hooks/useInput';\nimport { Button, Form, Header, Input, Label, LinkContainer, Error, Success } from './styles';\nimport axios from 'axios';\nimport { Link, Navigate } from 'react-router-dom';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\n\nconst SignUp = () => {\n  const { data, error, mutate } = useSWR('/api/users', fetcher);\n\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, , setPassword] = useInput(''); //state, 비우고, setState(문법적으로 선언하지 않는것도 구조분해 할당에서 가능함)\n  const [passwordCheck, , setPasswordCheck] = useInput('');\n  const [mismatchError, setMissmatchError] = useState(false);\n  const [signUpError, setSignUpError] = useState('');\n  const [signUpSuccess, setSignUpSuccess] = useState(false);\n\n  const onChangePassword = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setPassword(e.target.value);\n      setMissmatchError(e.target.value !== passwordCheck);\n    },\n    [passwordCheck],\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setPasswordCheck(e.target.value);\n      setMissmatchError(e.target.value !== password);\n    },\n    [password],\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (!mismatchError && nickname) {\n        console.log('서버로 회원가입하기');\n        setSignUpError(''); // 비동기 요청 사이에 setState의 경우 초기화를 한번 해주면 좋다.\n        setSignUpSuccess(false);\n        axios\n          .post('/api/users', {\n            email,\n            nickname,\n            password,\n          })\n          .then((response) => {\n            console.log(response);\n            setSignUpSuccess(true);\n          })\n          .catch((error) => {\n            console.log(error.response);\n            setSignUpError(error.response.data);\n          })\n          .finally(() => {});\n\n        /*\n          ? 요청시 개발자도구 네트워크탭을 확인해보면 post와 options 로 두번의 요청이 간다.\n          ? CORS에 대한 요청, 주소(포트)가 달라서 options요청을 한번 더 보냄.\n          ? 원래 주소가 다르면 요청이 안된다. Origin?? 이 다르기 때문에\n          */\n      }\n    },\n    [email, nickname, password, passwordCheck, mismatchError],\n  );\n\n  if (data === undefined) {\n    return <div>로딩중....</div>;\n  }\n\n  if (data) {\n    return <Navigate to=\"/workspace/sleact/channel/일반\" />;\n    //이런 return은 항상 hooks보다 아래에 있어야 한다.\n  }\n\n  return (\n    <div id=\"container\">\n      <Header>Sleact</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\n          </div>\n        </Label>\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <div>\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" value={nickname} onChange={onChangeNickname} />\n          </div>\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n        </Label>\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              type=\"password\"\n              id=\"password-check\"\n              name=\"password-check\"\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n            />\n          </div>\n          {mismatchError && <Error>비밀번호가 일치하지 않습니다.</Error>}\n          {!nickname && <Error>닉네임을 입력해주세요.</Error>}\n          {signUpError && <Error>{signUpError}</Error>}\n          {signUpSuccess && <Success>회원가입되었습니다! 로그인해주세요.</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 회원이신가요?&nbsp;\n        <Link to=\"/login\">로그인 하러가기</Link>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"names":["data","error","mutate","useSWR","fetcher","email","onChangeEmail","useInput","nickname","onChangeNickname","password","setPassword","passwordCheck","setPasswordCheck","mismatchError","setMissmatchError","useState","signUpError","setSignUpError","signUpSuccess","setSignUpSuccess","onChangePassword","useCallback","e","target","value","onChangePasswordCheck","onSubmit","preventDefault","console","log","axios","then","response","catch","finally","undefined","to","id","type","name","onChange"],"sourceRoot":""}