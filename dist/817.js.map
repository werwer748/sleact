{"version":3,"file":"817.js","mappings":"qNAUA,MA8EA,EA9Ec,KACZ,MAAM,KAAEA,EAAI,MAAEC,EAAK,OAAEC,IAAWC,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,EAAS,CAE5DC,iBAAkB,OAEbC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtCC,EAAOC,IAAiBC,EAAAA,EAAAA,GAAS,KACjCC,EAAUC,IAAoBF,EAAAA,EAAAA,GAAS,IAExCG,GAAWC,EAAAA,EAAAA,cACdC,IACCA,EAAEC,iBACFV,GAAc,GACdW,EAAAA,EAAAA,KAEI,mBACA,CACET,QACAG,YAEF,CAAEO,iBAAiB,IAEpBC,MAAMC,IACLnB,EAAOmB,EAASrB,MAAM,EAAM,IAM7BsB,OAAOrB,IACNM,EAAiD,MAAnCN,EAAMoB,SAASrB,KAAKuB,WAAmB,GACrD,GAEN,CAACd,EAAOG,IAUV,YAAaY,IAATxB,EACK,sCAGLA,EACK,gBAAC,KAAQ,CAACyB,GAAG,iCAIpB,uBAAKC,GAAG,aACN,gBAAC,KAAM,eACP,gBAAC,KAAI,CAACZ,SAAUA,GACd,gBAAC,KAAK,CAACY,GAAG,eACR,sCACA,2BACE,gBAAC,KAAK,CAACC,KAAK,QAAQD,GAAG,QAAQE,KAAK,QAAQC,MAAOpB,EAAOqB,SAAUpB,MAGxE,gBAAC,KAAK,CAACgB,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAK,CAACC,KAAK,WAAWD,GAAG,WAAWE,KAAK,WAAWC,MAAOjB,EAAUkB,SAAUjB,KAEjFP,GAAc,gBAAC,KAAK,kCAEvB,gBAAC,KAAM,CAACqB,KAAK,UAAQ,QAEvB,gBAAC,KAAa,sBAEZ,gBAAC,KAAI,CAACF,GAAG,WAAS,cAEhB,C","sources":["webpack://alecture/./pages/Login/index.tsx"],"sourcesContent":["import React, { FormEvent, useCallback, useState } from 'react';\n\nimport useInput from '@hooks/useInput';\nimport { Button, Error, Form, Header, Input, Label, LinkContainer } from '@pages/SingUp/styles';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport { Navigate } from 'react-router-dom';\n\nconst LogIn = () => {\n  const { data, error, mutate } = useSWR('/api/users', fetcher, {\n    //? fetcher자리를 어떻게 써주느냐가 중요함\n    dedupingInterval: 100000, // 캐시의 유지기간 이 시간동안 중복요청을 방지함\n  });\n  const [logInError, setLogInError] = useState(false);\n  const [email, onChangeEmail] = useInput('');\n  const [password, onChangePassword] = useInput('');\n\n  const onSubmit = useCallback(\n    (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      setLogInError(false);\n      axios\n        .post(\n          '/api/users/login',\n          {\n            email,\n            password,\n          },\n          { withCredentials: true }, // 백엔드와 프론트엔드가 서로 서버가 다를경우 추가해줘야 쿠키가 추가 됨\n        )\n        .then((response) => {\n          mutate(response.data, false);\n          //? 쿠키에 connect.id를 날리면 로그아웃처리 된다.(express의 경우) 로그인되어있는게 이렇게 확인됨 ㄷㄷ\n          //? mutate는 서버에 요청을 보내지않고 수정하는것\n          //? OPTIMISTIC UI(두번째 변수 관련) : 좋아요를 예로 버튼을 클릭했을때 바로 하트에 불이들어오고 요청을 보냄 이때 요청이 실패하면 다시 불을 꺼버림\n          //? 낙관적 UI -> 내가 보낸 요청이 성공할거라 생각하고 미리 성공 Ui를 보여주고 요청해 점검\n        })\n        .catch((error) => {\n          setLogInError(error.response.data.statusCode === 401);\n        });\n    },\n    [email, password],\n  );\n\n  /*\n   * swr? 리덕스, 컨텍스트 api 처럼 값을 저장해 둘 수 있는 방법\n   * 보통 get 요청에 대한것을 저장함\n   * 쿠키에 저장한다.\n   * 백엔드와의 쿠키 공유설정으로 브라우저내에 저장\n   */\n\n  if (data === undefined) {\n    return <div>로딩중....</div>;\n  }\n\n  if (data) {\n    return <Navigate to=\"/workspace/sleact/channel/일반\" />;\n  }\n\n  return (\n    <div id=\"container\">\n      <Header>Sleact</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\n          </div>\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n          {logInError && <Error>이메일과 비밀번호 조합이 일치하지 않습니다.</Error>}\n        </Label>\n        <Button type=\"submit\">로그인</Button>\n      </Form>\n      <LinkContainer>\n        아직 회원이 아니신가요?&nbsp;\n        <Link to=\"/signup\">회원가입 하러가기</Link>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default LogIn;\n"],"names":["data","error","mutate","useSWR","fetcher","dedupingInterval","logInError","setLogInError","useState","email","onChangeEmail","useInput","password","onChangePassword","onSubmit","useCallback","e","preventDefault","axios","withCredentials","then","response","catch","statusCode","undefined","to","id","type","name","value","onChange"],"sourceRoot":""}