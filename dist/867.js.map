{"version":3,"file":"867.js","mappings":"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","sources":["webpack://alecture/./components/InviteChannelModal/index.tsx","webpack://alecture/./components/Modal/styles.tsx","webpack://alecture/./components/Modal/index.tsx","webpack://alecture/./hooks/useSocket.ts","webpack://alecture/./layouts/Workspace/styles.tsx","webpack://alecture/./components/Menu/styles.tsx","webpack://alecture/./components/Menu/index.tsx","webpack://alecture/./components/CreateChannelModal/index.tsx","webpack://alecture/./components/InviteWorkspaceModal/index.tsx","webpack://alecture/./components/DMList/styles.tsx","webpack://alecture/./components/DMList/index.tsx","webpack://alecture/./components/ChannelList/index.tsx","webpack://alecture/./layouts/Workspace/index.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport Modal from '@components/Modal';\nimport { Button, Input, Label } from '@pages/SingUp/styles';\nimport { useParams } from 'react-router';\nimport useInput from '@hooks/useInput';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\ninterface IProps {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\n\nconst InviteChannelModal = ({ show, onCloseModal, setShowInviteChannelModal }: IProps) => {\n  const { workspace, channel } = useParams();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { data: membersData, mutate: mutateMembers } = useSWR<IUser[]>(\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) return;\n\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          mutateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { MouseEvent, ReactNode, useCallback } from 'react';\nimport { CloseModalButton, CreateModal } from './styles';\n\ninterface IProps {\n  show: boolean;\n  onCloseModal: () => void;\n  children: ReactNode;\n}\n\nconst Modal = ({ show, children, onCloseModal }: IProps) => {\n  const stopPropagation = useCallback((e: MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import { io, Socket } from 'socket.io-client';\nimport { useCallback } from 'react';\n\nconst backUrl = 'http://localhost:3095';\n\nlet socket: Socket | undefined;\n\nconst useSocket = (workspace?: string): [Socket | undefined, () => void] => {\n  //   console.log('rerender', workspace);\n  const disconnect = useCallback(() => {\n    if (socket) {\n      socket.disconnect();\n      socket = undefined;\n    }\n  }, []);\n  if (!socket) {\n    socket = io(`${backUrl}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n  }\n  return [socket, disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\nimport { ReactNode } from 'react';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n  & img {\n    display: flex;\n  }\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n    &.selected {\n      color: white;\n    }\n  }\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll: any = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n  & h2 {\n    padding-left: 20px;\n  }\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { CSSProperties, ReactNode, useCallback } from 'react';\nimport { CloseModalButton, CreateMenu } from './styles';\n\ninterface IProps {\n  children: ReactNode;\n  style: CSSProperties;\n  show: boolean;\n  onCloseModal: (e: React.MouseEvent<HTMLElement>) => void;\n  closeButton?: boolean;\n}\n\nconst Menu = ({ children, style, show, onCloseModal, closeButton }: IProps) => {\n  const stopPropagation = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) return null;\n\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div onClick={stopPropagation} style={style}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\n\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import React, { useCallback } from 'react';\nimport Modal from '@components/Modal';\nimport { Button, Input, Label } from '@pages/SingUp/styles';\nimport useInput from '@hooks/useInput';\nimport axios, { AxiosResponse } from 'axios';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\n\ninterface IProps {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst CreateChannelModal = ({ show, onCloseModal, setShowCreateChannelModal }: IProps) => {\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  const { workspace, channel } = useParams(); // 주소창에서 정보가져오는 hook;\n  const { data: userData, error, mutate } = useSWR<IUser | false | undefined>('/api/users', fetcher);\n  const { data: channelData, mutate: mutateChannel } = useSWR<IChannel[]>(\n    // const { data: channelData, mutate: mutateChannel } = useSWR<any>(\n    userData ? `/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const onCreateChannel = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      console.log(workspace);\n      axios\n        .post(\n          `/api/workspaces/${workspace}/channels`,\n          {\n            name: newChannel,\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then(({ data }: { data: IChannel }) => {\n          setShowCreateChannelModal(false);\n          mutateChannel([...channelData!, data], false);\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newChannel],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button>생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import React, { useCallback } from 'react';\nimport Modal from '@components/Modal';\nimport { Button, Input, Label } from '@pages/SingUp/styles';\nimport { useParams } from 'react-router';\nimport useInput from '@hooks/useInput';\nimport useSWR from 'swr';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\ninterface IProps {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\n\nconst InviteWorkspaceModal = ({ show, onCloseModal, setShowInviteWorkspaceModal }: IProps) => {\n  const { workspace } = useParams();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { mutate: mutateMembers } = useSWR<IChannel[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) return;\n\n      axios\n        .post(`/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then((response) => {\n          mutateMembers();\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [workspace, newMember],\n  );\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"channel-label\">\n          <span>이메일</span>\n          <Input id=\"channel\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { CollapseButton } from './styles';\nimport useSocket from '@hooks/useSocket';\n\nconst DMList = () => {\n  const { workspace } = useParams();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    }); //? 연결해주는 이벤트리스너\n    // socket?.on('dm', onMessage);\n    // console.log('socket on dm', socket?.hasListeners('dm'), socket);\n    return () => {\n      // socket?.off('dm', onMessage);\n      // console.log('socket off dm', socket?.hasListeners('dm'));\n      socket?.off('onlineList'); //? 정리해주는 이벤트리스터 (한쌍처럼 생각할 것)\n    };\n  }, [socket]);\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Message</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            return (\n              <NavLink //Link랑 똑같음 (지금 주와 링크의 주가 같으면 특정 스타일이나 클래스네임을 부여한다.)\n                key={member.id}\n                className={({ isActive }) => (isActive ? 'selected' : '')}\n                to={`/workspace/${workspace}/dm/${member.id}`}\n              >\n                <i\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n                  }`}\n                  aria-hidden=\"true\"\n                  data-qa=\"presence_indicator\"\n                  data-qa-presence-self=\"false\"\n                  data-qa-presence-active=\"false\"\n                  data-qa-presence-dnd=\"false\"\n                  // style={{ width: '30px', height: '30px', backgroundColor: 'red' }}\n                />\n                <span>{member.nickname}</span>\n                {member.id === userData?.id && <span> (나)</span>}\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import { CollapseButton } from '@components/DMList/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useCallback, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst ChannelList = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  // const [socket] = useSocket(workspace);\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map((channel) => {\n            return (\n              <NavLink\n                key={channel.name}\n                className={({ isActive }) => (isActive ? 'selected' : '')}\n                to={`/workspace/${workspace}/channel/${channel.name}`}\n              >\n                <span># {channel.name}</span>\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  AddButton,\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceName,\n  Workspaces,\n  WorkspaceWrapper,\n  WorkspaceButton,\n  WorkspaceModal,\n} from './styles';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport axios from 'axios';\nimport { Navigate, Outlet, Route, Routes } from 'react-router-dom';\nimport gravatar from 'gravatar';\nimport loadable from '@loadable/component';\nimport Menu from '@components/Menu';\nimport { Link } from 'react-router-dom';\nimport { IChannel, IUser, IWorkspace } from '@typings/db';\nimport { Button, Input, Label } from '@pages/SingUp/styles';\nimport useInput from '@hooks/useInput';\nimport Modal from '@components/Modal';\nimport { toast } from 'react-toastify';\nimport CreateChannelModal from '@components/CreateChannelModal';\nimport { useParams } from 'react-router';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport DMList from '@components/DMList';\nimport ChannelList from '@components/ChannelList';\nimport useSocket from '@hooks/useSocket';\n\nconst Channel = loadable(() => import('@pages/Channel'));\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\n\nconst Workspace = () => {\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n\n  const { workspace } = useParams();\n  const { data: userData, error, mutate } = useSWR<IUser | false | undefined>('/api/users', fetcher);\n  //{ data: userData <- 구조분해할당시 변수 이름 바꾸는 문법을 제공한다.}\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n\n  const [socket, disconnect] = useSocket(workspace);\n\n  useEffect(() => {\n    if (channelData && userData && socket) {\n      console.log('소켓확인', socket);\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\n    }\n  }, [socket, channelData, userData]);\n\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [workspace, disconnect]);\n\n  //! const { data, error, mutate } = useSWR('http://localhost:3095/api/users#123', fetcher);\n  //* 같은 주소에 요청을해서 다르게 데이터를 저장하고 싶을 때 해당 url처럼 쿼리스트링같은 것을 붙여준다.\n\n  const onLogout = useCallback(() => {\n    axios\n      .post('/api/users/logout', null, {\n        withCredentials: true,\n      })\n      .then(() => {\n        mutate(false, false);\n      });\n  }, [mutate]);\n\n  const onClickUserProfile = useCallback(() => {\n    setShowUserMenu((prev) => !prev);\n  }, [showUserMenu]);\n\n  const onCloseUserProfile = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      e.stopPropagation();\n      setShowUserMenu(false);\n    },\n    [showUserMenu],\n  );\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e: React.FormEvent<HTMLElement>) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) return;\n      if (!newUrl || !newUrl.trim()) return;\n\n      // console.log({\n      //   workspace: newWorkspace,\n      //   url: newUrl,\n      // });\n      axios\n        .post(\n          '/api/workspaces',\n          {\n            workspace: newWorkspace.trim(),\n            url: newUrl.trim(),\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then(() => {\n          mutate();\n          setShowCreateWorkspaceModal(false);\n          setNewWorkspace('');\n          setNewUrl('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl],\n  );\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const toggleWorkspaceModal = useCallback(() => {\n    setShowWorkspaceModal((prev) => !prev);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowInviteWorkspaceModal(true);\n  }, []);\n\n  if (!userData) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <div>\n      <Header>\n        <RightMenu>\n          <span onClick={onClickUserProfile}>\n            <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\n            {showUserMenu && (\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onCloseUserProfile}>\n                <ProfileModal>\n                  <img src={gravatar.url(userData.email, { s: '36px', d: 'retro' })} alt={userData.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{userData.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </span>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData &&\n            userData.Workspaces?.map((item: IWorkspace) => {\n              return (\n                <Link key={item.id} to={`/workspace/${123}/channel/일반`}>\n                  <WorkspaceButton>{item.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n                </Link>\n              );\n            })}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceModal}>Sleact</WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>Sleact</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onLogout}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        {/* 계층적 라우트(중첨라우트, 네스티드 라우트) */}\n        <Chats>\n          {/* 라우트 포함 컴포넌트에서 중첩라우팅 사용 */}\n          <Routes>\n            <Route path=\"/channel/:channel\" element={<Channel />} />\n            <Route path=\"/dm/:id\" element={<DirectMessage />} />\n          </Routes>\n          {/* <Outlet /> Outlet이용한 중첩라우팅 */}\n        </Chats>\n      </WorkspaceWrapper>\n      {/* input이 있는 경우 왠만하면 컴포넌트를 분리하는게 좋다. */}\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 URL</span>\n            <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </div>\n  );\n};\n\nexport default Workspace;\n"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","membersData","mutate","mutateMembers","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","socket","disconnect","undefined","io","transports","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","Menu","style","closeButton","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","channelData","mutateChannel","onCreateChannel","log","name","withCredentials","Modal","setShowInviteWorkspaceModal","CollapseButton","collapse","dedupingInterval","memberData","useSocket","channelCollapse","setChannelCollapse","useState","onlineList","setOnlineList","toggleChannelCollapse","prev","useEffect","on","off","className","map","member","isOnline","includes","key","isActive","to","nickname","Channel","loadable","DirectMessage","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showWorkspaceModal","setShowWorkspaceModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","newUrl","onChangeNewUrl","setNewUrl","showCreateChannelModal","showInviteWorkspaceModal","showInviteChannelModal","emit","channels","v","onLogout","onClickUserProfile","onCloseUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","item","slice","toUpperCase","left","path","element","InviteChannelModal"],"sourceRoot":""}