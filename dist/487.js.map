{"version":3,"file":"487.js","mappings":"kIAKA,MAmBA,EAnBqBA,IACnB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAASH,GAMnC,MAAO,CAACC,GAJQG,EAAAA,EAAAA,cAAaC,IAE3BH,EAASG,EAAEC,OAAOL,MAAsB,GACvC,IACqBC,EAAS,C,gHCV5B,MAAMK,GAAM,iRAWNC,GAAI,yGAMJC,GAAK,kNAaLC,GAAK,4nBAsBLC,GAAM,0iBA4BNC,GAAK,+GAMLC,GAAO,6FAKPC,GAAa,iO,gDC3F1B,MASA,EATiBC,GACfC,EAAAA,EAAAA,IACOD,EAAK,CACRE,iBAAiB,IAElBC,MAAMC,GAAaA,EAASC,M","sources":["webpack://alecture/./hooks/useInput.ts","webpack://alecture/./pages/SingUp/styles.tsx","webpack://alecture/./utils/fetcher.ts"],"sourcesContent":["import { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from 'react';\nimport { OnChangeHandlerFunc } from 'react-mentions';\n\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\n\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\n  const [value, setValue] = useState(initialData);\n  // const handler = useCallback((e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    // const handler = useCallback((e: any) => {\n    setValue(e.target.value as unknown as T);\n  }, []);\n  return [value, handler, setValue];\n};\n\n/*\n * unknown은 TS의 탑 타입(Top Type). 따라서 TS에 있는 모든 타입을 포함하여 어느 값이든 가질 수 있다.\n * unknown을 사용 하는 것은 컴파일러에게 \"어떤타입이 될지 모르니 니가 추론해줘\" 라고 이야기하는 것.\n * unknown 타입은 any 타입을 제외한 다른 타입으로 선언한 변수에 할당할 수 없다.\n * unknown 타입으로 선언된 변수는 프로퍼티에 접근할 수 없으며, 인스턴스를 생성할 수도 없다.\n * any를 사용하는 곳에서 unknown을 사용하면 보다 안전하게 코딩이 가능하지만 any는 타입을 좁혀서 사용하지않아도 되고, unknown은 타입을 좁혀서 사용해야 한다.\n * unknown타입으로 지정된 값은 타입을 먼저 확인한 후에 무언가를 할 수 있으므로 unknown을 사용하는 것이 보다 안전하다.\n */\n\nexport default useInput;\n","import styled from '@emotion/styled';\n\nexport const Header = styled.header`\n  text-align: center;\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  font-weight: 700;\n  font-size: 48px;\n  line-height: 46px;\n  letter-spacing: -0.75px;\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nexport const Form = styled.form`\n  margin: 0 auto;\n  width: 400px;\n  max-width: 400px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 16px;\n  & > span {\n    display: block;\n    text-align: left;\n    padding-bottom: 8px;\n    font-size: 15px;\n    cursor: pointer;\n    line-height: 1.46666667;\n    font-weight: 700;\n  }\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\n  border: 1px solid var(--saf-0);\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\n  box-sizing: border-box;\n  margin: 0 0 20px;\n  width: 100%;\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\n  padding: 12px;\n  height: 44px;\n  padding-top: 11px;\n  padding-bottom: 13px;\n  font-size: 18px;\n  line-height: 1.33333333;\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 12px;\n  width: 100%;\n  max-width: 100%;\n  color: #fff;\n  background-color: #4a154b;\n  border: none;\n  font-size: 18px;\n  font-weight: 900;\n  height: 44px;\n  min-width: 96px;\n  padding: 0 16px 3px;\n  transition: all 80ms linear;\n  user-select: none;\n  outline: none;\n  cursor: pointer;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n  &:hover {\n    background-color: rgba(74, 21, 75, 0.9);\n    border: none;\n  }\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Error = styled.div`\n  color: #e01e5a;\n  margin: 8px 0 16px;\n  font-weight: bold;\n`;\n\nexport const Success = styled.div`\n  color: #2eb67d;\n  font-weight: bold;\n`;\n\nexport const LinkContainer = styled.p`\n  font-size: 13px;\n  color: #616061;\n  margin: 0 auto 8px;\n  width: 400px;\n  max-width: 400px;\n  & a {\n    color: #1264a3;\n    text-decoration: none;\n    font-weight: 700;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n","import axios from 'axios';\n\nconst fetcher = (url: string) =>\n  axios\n    .get(url, {\n      withCredentials: true,\n    })\n    .then((response) => response.data);\n\n// fetcher를 다양하게 사용하기위해서는 용도별로 다양하게 만들어서 그때 그때 다르게 사용할 수 있다.\n\nexport default fetcher;\n"],"names":["initialData","value","setValue","useState","useCallback","e","target","Header","Form","Label","Input","Button","Error","Success","LinkContainer","url","axios","withCredentials","then","response","data"],"sourceRoot":""}